import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "ChatManager.h"
        name: "ChatManager"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["VoiceAILLM/ChatManager 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "isProcessing"
            type: "bool"
            read: "isProcessing"
            notify: "isProcessingChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "messageCount"
            type: "int"
            read: "messageCount"
            notify: "messageCountChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "currentSystemPrompt"
            type: "QString"
            read: "currentSystemPrompt"
            write: "setCurrentSystemPrompt"
            notify: "currentSystemPromptChanged"
            index: 2
        }
        Signal { name: "isProcessingChanged" }
        Signal { name: "messageCountChanged" }
        Signal { name: "currentSystemPromptChanged" }
        Signal {
            name: "messageAdded"
            Parameter { name: "messageId"; type: "QString" }
        }
        Signal {
            name: "messageUpdated"
            Parameter { name: "messageId"; type: "QString" }
        }
        Signal {
            name: "error"
            Parameter { name: "errorMessage"; type: "QString" }
        }
        Method {
            name: "processUserInput"
            Parameter { name: "text"; type: "QString" }
        }
        Method { name: "clearChat" }
        Method { name: "regenerateLastResponse" }
        Method {
            name: "deleteMessage"
            Parameter { name: "messageId"; type: "QString" }
        }
        Method {
            name: "editMessage"
            Parameter { name: "messageId"; type: "QString" }
            Parameter { name: "newContent"; type: "QString" }
        }
        Method {
            name: "exportChat"
            Parameter { name: "filePath"; type: "QString" }
        }
        Method {
            name: "importChat"
            Parameter { name: "filePath"; type: "QString" }
        }
        Method {
            name: "writeTextFile"
            type: "bool"
            Parameter { name: "filePath"; type: "QString" }
            Parameter { name: "content"; type: "QString" }
        }
        Method {
            name: "handleLLMResponse"
            Parameter { name: "response"; type: "QString" }
        }
        Method {
            name: "handleStreamingUpdate"
            Parameter { name: "partialResponse"; type: "QString" }
        }
        Method {
            name: "handleLLMError"
            Parameter { name: "error"; type: "QString" }
        }
    }
    Component {
        file: "OAuth2Manager.h"
        name: "OAuth2Manager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["VoiceAILLM/OAuth2Manager 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Provider"
            isScoped: true
            values: ["WeChat", "DingTalk"]
        }
        Enum {
            name: "AuthMethod"
            isScoped: true
            values: ["QRCode", "OAuth2Flow"]
        }
        Property {
            name: "isWeChatAuthenticated"
            type: "bool"
            read: "isWeChatAuthenticated"
            notify: "weChatAuthenticationChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "isDingTalkAuthenticated"
            type: "bool"
            read: "isDingTalkAuthenticated"
            notify: "dingTalkAuthenticationChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "weChatUserInfo"
            type: "QString"
            read: "weChatUserInfo"
            notify: "weChatUserInfoChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "dingTalkUserInfo"
            type: "QString"
            read: "dingTalkUserInfo"
            notify: "dingTalkUserInfoChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "weChatQRCode"
            type: "QString"
            read: "weChatQRCode"
            notify: "weChatQRCodeChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "dingTalkQRCode"
            type: "QString"
            read: "dingTalkQRCode"
            notify: "dingTalkQRCodeChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "isWeChatLoading"
            type: "bool"
            read: "isWeChatLoading"
            notify: "weChatLoadingChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "isDingTalkLoading"
            type: "bool"
            read: "isDingTalkLoading"
            notify: "dingTalkLoadingChanged"
            index: 7
            isReadonly: true
        }
        Signal { name: "weChatAuthenticationChanged" }
        Signal { name: "dingTalkAuthenticationChanged" }
        Signal { name: "weChatUserInfoChanged" }
        Signal { name: "dingTalkUserInfoChanged" }
        Signal { name: "weChatQRCodeChanged" }
        Signal { name: "dingTalkQRCodeChanged" }
        Signal { name: "weChatLoadingChanged" }
        Signal { name: "dingTalkLoadingChanged" }
        Signal {
            name: "authenticationError"
            Parameter { name: "provider"; type: "Provider" }
            Parameter { name: "error"; type: "QString" }
        }
        Signal {
            name: "authenticationSuccess"
            Parameter { name: "provider"; type: "Provider" }
        }
        Method {
            name: "setWeChatCredentials"
            Parameter { name: "appId"; type: "QString" }
            Parameter { name: "appSecret"; type: "QString" }
        }
        Method {
            name: "setDingTalkCredentials"
            Parameter { name: "appId"; type: "QString" }
            Parameter { name: "appSecret"; type: "QString" }
        }
        Method {
            name: "authenticateWeChat"
            Parameter { name: "method"; type: "AuthMethod" }
        }
        Method { name: "authenticateWeChat"; isCloned: true }
        Method {
            name: "authenticateDingTalk"
            Parameter { name: "method"; type: "AuthMethod" }
        }
        Method { name: "authenticateDingTalk"; isCloned: true }
        Method { name: "refreshWeChatQRCode" }
        Method { name: "refreshDingTalkQRCode" }
        Method {
            name: "checkQRCodeStatus"
            Parameter { name: "provider"; type: "Provider" }
        }
        Method { name: "startWeChatOAuth" }
        Method { name: "startDingTalkOAuth" }
        Method {
            name: "refreshUserInfo"
            Parameter { name: "provider"; type: "Provider" }
        }
        Method { name: "logoutWeChat" }
        Method { name: "logoutDingTalk" }
        Method { name: "logoutAll" }
        Method {
            name: "onWeChatQRCodeReceived"
            Parameter { name: "reply"; type: "QNetworkReply"; isPointer: true }
        }
        Method {
            name: "onDingTalkQRCodeReceived"
            Parameter { name: "reply"; type: "QNetworkReply"; isPointer: true }
        }
        Method {
            name: "onWeChatAuthResult"
            Parameter { name: "reply"; type: "QNetworkReply"; isPointer: true }
        }
        Method {
            name: "onDingTalkAuthResult"
            Parameter { name: "reply"; type: "QNetworkReply"; isPointer: true }
        }
        Method {
            name: "onWeChatUserInfoReceived"
            Parameter { name: "reply"; type: "QNetworkReply"; isPointer: true }
        }
        Method {
            name: "onDingTalkUserInfoReceived"
            Parameter { name: "reply"; type: "QNetworkReply"; isPointer: true }
        }
        Method { name: "checkQRCodeStatusTimer" }
    }
    Component {
        file: "TTSManager.h"
        name: "TTSManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["VoiceAILLM/TTSManager 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "isEnabled"
            type: "bool"
            read: "isEnabled"
            write: "setIsEnabled"
            notify: "enabledChanged"
            index: 0
        }
        Property {
            name: "isSpeaking"
            type: "bool"
            read: "isSpeaking"
            notify: "speakingChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "availableVoices"
            type: "QStringList"
            read: "availableVoices"
            notify: "availableVoicesChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "currentVoice"
            type: "QString"
            read: "currentVoice"
            write: "setCurrentVoice"
            notify: "currentVoiceChanged"
            index: 3
        }
        Property {
            name: "rate"
            type: "double"
            read: "rate"
            write: "setRate"
            notify: "rateChanged"
            index: 4
        }
        Property {
            name: "pitch"
            type: "double"
            read: "pitch"
            write: "setPitch"
            notify: "pitchChanged"
            index: 5
        }
        Property {
            name: "volume"
            type: "double"
            read: "volume"
            write: "setVolume"
            notify: "volumeChanged"
            index: 6
        }
        Property {
            name: "state"
            type: "QTextToSpeech::State"
            read: "state"
            notify: "stateChanged"
            index: 7
            isReadonly: true
        }
        Signal { name: "enabledChanged" }
        Signal { name: "speakingChanged" }
        Signal { name: "availableVoicesChanged" }
        Signal { name: "currentVoiceChanged" }
        Signal { name: "rateChanged" }
        Signal { name: "pitchChanged" }
        Signal { name: "volumeChanged" }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "QTextToSpeech::State" }
        }
        Signal {
            name: "error"
            Parameter { name: "errorMessage"; type: "QString" }
        }
        Method {
            name: "speak"
            Parameter { name: "text"; type: "QString" }
        }
        Method { name: "stop" }
        Method { name: "pause" }
        Method { name: "resume" }
        Method { name: "initialize" }
        Method { name: "refreshVoices" }
        Method {
            name: "onStateChanged"
            Parameter { name: "state"; type: "QTextToSpeech::State" }
        }
        Method {
            name: "onErrorOccurred"
            Parameter { name: "reason"; type: "QTextToSpeech::ErrorReason" }
            Parameter { name: "errorString"; type: "QString" }
        }
        Method { name: "applyJarvisVoicePreset" }
        Method { name: "applyNaturalVoicePreset" }
        Method { name: "applyRobotVoicePreset" }
        Method { name: "applyChineseVoicePreset" }
    }
    Component {
        file: "VoiceRecognitionManager.h"
        name: "VoiceRecognitionManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["VoiceAILLM/VoiceRecognitionManager 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "isListening"
            type: "bool"
            read: "isListening"
            notify: "listeningChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "isRecording"
            type: "bool"
            read: "isRecording"
            notify: "recordingChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "recognizedText"
            type: "QString"
            read: "recognizedText"
            notify: "recognizedTextChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "audioLevel"
            type: "double"
            read: "audioLevel"
            notify: "audioLevelChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "isConfigured"
            type: "bool"
            read: "isConfigured"
            notify: "configurationChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "availableDevices"
            type: "QStringList"
            read: "availableDevices"
            notify: "availableDevicesChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "currentDevice"
            type: "QString"
            read: "currentDevice"
            write: "setCurrentDevice"
            notify: "currentDeviceChanged"
            index: 6
        }
        Property {
            name: "googleApiKey"
            type: "QString"
            read: "googleApiKey"
            write: "setGoogleApiKey"
            notify: "googleApiKeyChanged"
            index: 7
        }
        Property {
            name: "availableMicrophones"
            type: "QStringList"
            read: "availableMicrophones"
            notify: "availableMicrophonesChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "currentMicrophone"
            type: "QString"
            read: "currentMicrophone"
            write: "setCurrentMicrophone"
            notify: "currentMicrophoneChanged"
            index: 9
        }
        Property {
            name: "isTesting"
            type: "bool"
            read: "isTesting"
            notify: "isTestingChanged"
            index: 10
            isReadonly: true
        }
        Signal { name: "listeningChanged" }
        Signal { name: "recordingChanged" }
        Signal { name: "recognizedTextChanged" }
        Signal { name: "audioLevelChanged" }
        Signal { name: "configurationChanged" }
        Signal { name: "availableDevicesChanged" }
        Signal { name: "currentDeviceChanged" }
        Signal {
            name: "textRecognized"
            Parameter { name: "text"; type: "QString" }
        }
        Signal {
            name: "error"
            Parameter { name: "errorMessage"; type: "QString" }
        }
        Signal { name: "googleApiKeyChanged" }
        Signal { name: "availableMicrophonesChanged" }
        Signal { name: "currentMicrophoneChanged" }
        Signal { name: "isTestingChanged" }
        Method { name: "startListening" }
        Method { name: "stopListening" }
        Method { name: "toggleListening" }
        Method { name: "refreshMicrophones" }
        Method { name: "startMicrophoneTest" }
        Method { name: "stopMicrophoneTest" }
        Method { name: "updateAudioLevel" }
        Method { name: "processAudioData" }
        Method {
            name: "onSpeechRecognitionFinished"
            Parameter { name: "reply"; type: "QNetworkReply"; isPointer: true }
        }
        Method {
            name: "onNetworkError"
            Parameter { name: "error"; type: "QNetworkReply::NetworkError" }
        }
    }
}
